# データベースの操作
# ターミナルでの使用方法を学ぶ
# ターミナルでは、mysqlというRDBMSを使用してSQLを実行できる。
# MySQLを使用するには、ターミナルからログインする。

# % cd 

# % mysql -u root
# -u rootというオプションで、ユーザーは「ルート」でログインするという意味になる。
# ここでいうルート(root)とは、Mysqlで元から用意してくれているユーザーを指している。
# このユーザーのパスワードは空で設定されているので、ログインにパスワードは必要ない。

# sqlはmysql>の続きから、入力して実行ができる。
# また、SQLはGUIツールであるsequel Pro(シークエルプロ)でも使用できる。

# sequel Proで使用する場合もログインする必要がある。
# ユーザ名のところをrootにすることでログインできる。

# アプリケーションのデータベースを選択すると、以下のように上部に「クエリ」というボタンがあるのでそこをクリックすると、洗濯しているデータベスに関するSQLを記述することができる。

# SQLによるデータベースの操作

# SQLとは「Structured Query Language」の略で、RDBの操作を行うための言語です。

# SQLはデータベースやテーブルに対して様々な命令を行いますが、その命令は大きく以下の３つに分類される。
# ・データを定義する「DDL (Data Definition Language)」
# ・データを操作する「DML (Data Manipulation Language)」
# ・データを制御する「DCL (Data Control Language)」

# ・DDL
# データを定義するSQLです、以下のような作成/更新/削除などの命令文がある。
# | 命令         | 機能                                                 |
# | CREATE      | データベスやテーブルを作成                               |
# | ALTER       | データベースやテーブルの更新                              |
# | DROP        | データベースやテーブルの削除                              |

# データベースの作成

# ・CREATE文
# CREATE文は、データベースやテーブルを作成できるSQLの文です。
# CREATE DATABASE文を実行すると、指定した名前のデータベースが作成される。
# 実行時には以下のようにデータベース名の指定が必要
# 構文(構文とは決まったコードの事ルールみたいなもので必要なもの)
# mysql > CREATE DATABASE <<データベースの名前>>;
# 小文字でも動作はするが、他の文字と混ざると読みづらくなることから、大文字で記述することが一般的。

# ・SHOW文
# SHOW文は、データベースやテーブルを一覧表示できるSQLの分で
# SHOW DATABASES文を実行すると、作成されているデータベースを一覧で表示できる。

# mysql> SHOW DATABASES;

# ・DROP文
# DROP文は、データベースやテーブルを削除できるSQLの文です。
# DROP DATABASE文を実行すると、作成されているデータベースを削除できる。
# 構文
# mysql> DROP DATABASE <<データベース名>>;


# データベースを指定しよう
# ・USE文
# USE文は、どのデータベースを使用するのかを指定するSQLの文です。
# USE <<データベース名>>と指定することでデータベースを選択する。

# テーブルを操作したい時、初めに「どのデータベースにあるテーブルか」を選択する必要があるので、USEを使う。
# 構文
# mysql> USE <<データベース名>>;


# テーブルとカラムの作成。
# データベースの作成の時と同様に、テーブルを作成する際はCREATE TABLE文を使用する。

# 実行時には以下のようにテーブル名を指定する必要がある。また、そのテーブルに作成するカラムの名前とそのカラムの型を指定できる。
# 構文
# mysql> CREATE TABLE テーブル名 (カラム名1 カラム名の型(int型とかboolean型とか),カラム名2 カラム名2の型,...);

# Railsでテーブルを作る際は、rails g model モデル名でそのテーブルに紐づくモデルを作成し、その時に作られたマイグレーションファイルをrails db:migrateで実行するという手順を踏んでいました。

# migrate文が実行される裏側で、このCREATE TABLEというSQL文が動いていたという事になる。

# SQLの数値を入れる型はINT型で文字列はVARCHAR(M)（最大M文字の文字列)になる。

# 作成したテーブルを表示したいときは
# mysql> SHOW TABLES;
# と入力する


# テーブルの構造を確認する。
# 追加したカラムを確認するために、テーブルの構造を表示してみる。
# テーブル構造を確認するためには以下のようなSQL文を記述する。

# SHOW columns FROM <<テーブル名>>;

# ・FROM句
# FROM句は、対象となるテーブルを指定する際に使用するSQLの句です。
# 下記のように使用する
# 構文
# mysql> FROM <<テーブル名>>


# ・カラムを追加する。
# カラムの情報を更新するにはALTER文を使用する

# ・ALTER文
# ALTER文はデータベースやテーブルを編集できるSQLの分で、ALTER TABEL文を実行すると、テーブルに対してカラムの追加や削除ができる。
# 構文
# mysql> ALTER TABLE <<テーブル名>> 操作(命令);

# カラムを追加したい時は(１個)
# mysql> ALTER TABLE テーブル名 ADD カラム名 カラムの型;

# カラムを複数追加する場合
# mysql> ALTER TABLE テーブル名 ADD (カラム名 カラムの型, ....);

# カラムの変更
# カラムの変更もALTER TABLE文を使用し、下記の構文を使用する。
# mysql> ALTER TABLE テーブ名 CHANGE 古いカラム名 新しいカラム名 新しいカラムの型;

# mysql> ALTER TABLE goods CHANGE zaiko stock int;

# カラムの削除
# カラムの削除にもALTER TABLE文を使用する。
# 構文
# ALTER TABLE テーブル名 DROP カラム名;

# mysql> ALTER TABLE goods DROP stock;